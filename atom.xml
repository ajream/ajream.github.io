<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ajream.github.io</id>
    <title>Gridea</title>
    <updated>2021-07-12T08:02:06.724Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ajream.github.io"/>
    <link rel="self" href="https://ajream.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ajream.github.io/images/avatar.png</logo>
    <icon>https://ajream.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[STL学习]]></title>
        <id>https://ajream.github.io/post/stl-xue-xi/</id>
        <link href="https://ajream.github.io/post/stl-xue-xi/">
        </link>
        <updated>2021-07-11T16:46:03.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="stl">STL</h1>
<p><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">参考网页</a></p>
<h2 id="vector动态数组">vector动态数组</h2>
<p>特点：可变数组（动态数组），可在末端快速插入、删除，可随机访问任何元素。</p>
<p>实现动态增长原理：</p>
<p>​		数组满了后，再往里面添加元素，cpu会申请更大空间，把原数组数据copy到新空间中，再把新元素插入进去；</p>
<pre><code class="language-c">for(int i=0; i&lt;n; ++i){
        idx = d[i] - 1;
        if(p[idx]==p.front() &amp;&amp; p.front != p.back()) {
            p.erase(p.begin());
            score += p.front();
        }
        if(p[idx]==p.back() &amp;&amp; p.front != p.back()) {
            p.erase(p.rend());
            score += p.back();
        }
        if(p.front == p.back()) {
            score += 0;
        }
        if(p[idx]!=p.front() &amp;&amp; p[idx]!=p.back()){
            score += p[idx-1] + p[idx+1];
            p.erase(&amp;p[idx]);
        }
    }
</code></pre>
<ol>
<li>
<p>首先：</p>
<pre><code class="language-c++">#include &lt;vector&gt;
</code></pre>
</li>
<li>
<p>创建和初始化</p>
<pre><code class="language-c++">vector&lt;T&gt; vec;
vector&lt;T&gt; vec(size); //创建具有size个元素的vector
vector&lt;T&gt; vec(size, val); //创建具有size个元素的vector,初始值为val
</code></pre>
</li>
<li>
<p>获取迭代器</p>
<pre><code class="language-c++">vector&lt;int&gt; v1;
vector&lt;int&gt;::iterator it1 = v1.begin();
vector&lt;int&gt;::iterator it2 = v1.end();

vec.begin()、 vec.end()、 vec.rbegin()、 vec.rend() //后两个为逆迭代器
</code></pre>
<p>![image-20210704222741364](https://gitee.com/ajream/images/raw/master/img/2021-07-04 22-27-46_image-20210704222741364.png)</p>
</li>
<li>
<p>常用操作函数</p>
<pre><code class="language-c++">vec.at(n) 	//返回vec中位置为n的元素
vec[n]
    
vec.back() 	//返回vec中最后一个元素
vec.front() //返回vec中的第一个元素

vec.push_back(a) //将元素a插入到vec的末尾
vec.pop_back() //删除vec中的末尾元素

vec.clear() //清除vec中的所有元素
vec.empty() //判断vec是否为空，为空返回true，否则返回false
    
vec.begin()、 vec.end()、 vec.rbegin()、 vec.rend() //后两个为逆迭代器
vec.size() //返回vec中的元素数量

vec.resize(int num);  //重新设置大小，若比原来小，多余的被抛弃，若比原来大，用0填充多出的
vec.resize(int , 4);  //重新设置大小，若比原来大，用4填充多出的

vec.insert(v.begin(), 30); //表示插入操作完成后30位于v.begin()的位置

vec.erase(v.begin());  //删除v.begin()位置的元素
vec.erase(v.begin()+1, v.end());  //删除第2个之后的元素
</code></pre>
</li>
</ol>
<h2 id="stack栈">stack栈</h2>
<p>特点：只允许读写栈顶元素，不支持访问除栈顶元素外的任意元素，没有迭代器</p>
<ol>
<li>
<p>创建</p>
<pre><code class="language-c">#include &lt;stack&gt;
stack&lt;T&gt; sta;
</code></pre>
</li>
<li>
<p>基本操作：</p>
<pre><code class="language-c">sta.top() //返回sta的栈顶元素
sta.pop() //删除sta的栈顶元素
sta.push(a) //向sta的栈顶插入元素a

sta.empty() //检查sta是否为空
sta.size() //返回容纳的元素数量
</code></pre>
</li>
</ol>
<h2 id="queue队列">queue队列</h2>
<p>特点：只能访问首尾元素（队头：移出元素，获取元素； 队尾：插入、获取），没有迭代器</p>
<ol>
<li>创建</li>
</ol>
<pre><code class="language-c">#include &lt;queue&gt;
queue&lt;T&gt; que;
</code></pre>
<ol start="2">
<li>
<p>基本操作</p>
<pre><code class="language-c">que.front() 	//返回que的队头元素
que.back() 		//返回que的队尾元素
    
que.push(a) 	//向que的尾部插入元素a
que.pop() 		//删除que的队头元素
    
que.empty() 	//检查que是否为空
que.size() 		//返回que容纳的元素数量
</code></pre>
</li>
</ol>
<h3 id="priority_queue优先队列堆">priority_queue优先队列（堆）</h3>
<p>特点：最大元素查找时间复杂度O(1)，插入与释出O(log(n))</p>
<ol>
<li>
<p>创建（默认会创建一个最大堆）</p>
<pre><code class="language-c++">#include &lt;queue&gt;
priority_queue&lt;int&gt; q;   // 创建最大堆
priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q2;  //最小堆， vector为底层容器
</code></pre>
</li>
<li>
<p>基本操作</p>
<pre><code class="language-c++">//元素访问
top();     //栈顶元素

//容量
empty();
size();

//修改器
push(a);  //插入元素，并对底层容器排序
pop();	//删除队首元素
swap();

</code></pre>
</li>
</ol>
<h2 id="set集合">set集合</h2>
<h3 id="有序-不可重复集合set">有序、不可重复集合set</h3>
<p>特点：查、插、删、改的时间复杂度均为O(logn)</p>
<ol>
<li>
<p>创建：</p>
<pre><code class="language-c">set&lt;T&gt; st;   			// 默认升序
set&lt;T, greater&lt;T&gt;&gt; st; 	//降序
</code></pre>
</li>
<li>
<p>基本操作</p>
<pre><code class="language-c++">st.begin() st.end() st.rbegin() st.rend(); //返回迭代器

st.insert(a); //往st中插入元素a

st.erase(iterator it); //删除st中it指向的元素
st.erase(iterator itl, iterator itr); //删除st中[itl,itr)之间的元素
st.erase(a); //删除st中值为a的元素

st.clear(); //清除st中所有元素

st.count(a); //返回st中值为a的元素数量（1或0）
st.find(a); //返回st中指向值为a的元素的迭代器，若找不到返回st.end()

st.lower_bound(a); //返回指向首个值不小于a的元素的迭代器
st.upper_bound(a); //返回指向首个值大于a的元素的迭代器

</code></pre>
</li>
</ol>
<h3 id="有序-可重复集合multiset">有序、可重复集合multiset</h3>
<p>特点：查、插、删、改的时间复杂度均为O(logn)</p>
<ol>
<li>
<p>创建</p>
<pre><code class="language-c">#include &lt;set&gt;
multiset&lt;T&gt; st;
multiset&lt;T, greater&lt;T&gt;&gt; st; //降序
</code></pre>
</li>
<li>
<p>常用操作与set相同，个别有微小区别</p>
<pre><code class="language-c">find(a)   //返回指向“第一个”a的迭代器
</code></pre>
</li>
</ol>
<h3 id="无序集合unordered_set-unordered_multiset">无序集合unordered_set、unordered_multiset</h3>
<p>特点：查、插、删的时间复杂度均为O(1)</p>
<ol>
<li>
<p>创建</p>
<pre><code class="language-c">#include &lt;unordered_set&gt;   //注意与上面2个不同
unordered_set&lt;T&gt; st; 
unordered_multiset&lt;T&gt; st;
</code></pre>
</li>
<li>
<p>基本操作与set/multiset基本相同，但不支持修改</p>
</li>
</ol>
<h2 id="map">map</h2>
<h3 id="map有序">map有序</h3>
<p>特点：</p>
<ul>
<li>
<p>按照键值队<strong>排序</strong>的集合，</p>
</li>
<li>
<p>查、插、删、改的时间复杂度均为O(logn)</p>
</li>
</ul>
<ol>
<li>
<p>创建与初始化(例如)</p>
<pre><code class="language-c">#include &lt;map&gt;
map&lt;string, int&gt; mp = {{&quot;A&quot;, 1}, {&quot;B&quot;, 2}};
mp[&quot;C&quot;] = 3;
</code></pre>
<p>![image-20210704222939548](https://gitee.com/ajream/images/raw/master/img/2021-07-04 22-29-43_image-20210704222939548.png)</p>
</li>
<li>
<p>基本操作</p>
<pre><code class="language-c">mp.begin();   mp.end();   mp.rbegin();   mp.rend();

mp[a];  // 读写键为a的元素

mp.empty();  // 检查mp是否为空
mp.size();  // 返回mp容纳的元素数
mp.clear();  // 清除mp的所有元素

mp.erase(iterator it);  // 移除mp中it指向的元素
mp.erase(a);  // 移除mp中键为a的元素
</code></pre>
</li>
</ol>
<h3 id="unordered_map-无序">unordered_map 无序</h3>
<p>特点：使用哈希算法，时间复杂度O(1)</p>
<ol>
<li>
<p>创建（与map相同）</p>
</li>
<li>
<p>基本操作</p>
<pre><code class="language-c">//迭代器
begin() end()  

//容量
empty();
size();       //返回容纳的元素数
max_size();		//返回可容纳的最大元素数c
    
//查找
at()   //访问指定的元素，同时进行越界检查
operator[]  //访问或插入指定的元素
count()			//返回匹配特定键的元素数量
find()		//寻找带有特定键的元素
contains()   //检查容器是否含有带特定键的元素
equal_range()   //返回匹配特定键的元素范围

//修改器
clear()
insert()   //插入元素或结点 (C++17 起)
insert_or_assign()  //插入元素，或若键已存在则赋值给当前元素
erase();
swap();   //交换内容
extract();	//从另一容器释出结点
merge();		//从另一容器接合结点
</code></pre>
<p>insert()</p>
<pre><code class="language-c++">unordered_map&lt;int, string&gt; dict = {{1, &quot;one&quot;}, {2, &quot;two&quot;}};
dict.insert({3, &quot;three&quot;});
dict.insert(std::make_pair(4, &quot;four&quot;));
dict.insert({{4, &quot;another four&quot;}, {5, &quot;five&quot;}});
</code></pre>
<p>![image-20210704223730638](https://gitee.com/ajream/images/raw/master/img/2021-07-04 22-37-35_image-20210704223730638.png)</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://ajream.github.io/post/hello-gridea/</id>
        <link href="https://ajream.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>